#include "test_common.h"

using namespace cv;

TEST(FindIntersectionTest, Exact)
{
  Mat L = (Mat_<double>(2,3) <<
      -2, 4, -8,
      3, 1.5, 4.5);

  Vec3d expectedP(-2, 1, 1);
  Vec3d actualP = findIntersection(L);
  actualP /= actualP(2);

  EXPECT_APPROX_MAT(expectedP, actualP, 1e-5);
}

TEST(FindIntersectionTest, Overdetermined)
{
  Mat L = (Mat_<double>(10, 3) <<
     2.687541828822515,  0.813728828359364,  -5.342413603507093,
     3.632454199649684, -0.719786398907608,   0.325244631102499,
     3.638693473163274,  0.776790023457746,  -5.884402579194347,
     3.790068603602767,  1.302125981527132,  -8.177024381536109,
     2.361393892614983, 10.704565724241936, -46.119973277878238,
     0.527745108664631, -0.381141773432425,   1.196227593344688,
    -0.550024251476654,  2.510671919176002, -10.014394719839640,
     1.161241887561747,  0.680471719635227,  -3.673520227395042,
     3.544408235420339,  2.601686293845141, -13.395847358676264,
     2.104342986793151,  0.300721465652405,  -2.790435817824210);

  Vec3d expectedP(0.732991075813755, 4.150649523926138, 1.0);
  Vec3d actualP(findIntersection(L));
  actualP /= actualP(2);

  EXPECT_APPROX_MAT(expectedP, actualP, 0.005);
}
